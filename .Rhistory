outlier <- NaN;
}
if ((is.nan(outlierSigmaMultiplier) | is.nan(outlierWidth))){
outlier <- NaN;
} else{
outlierMovingAverage = TRUE;
#outlierSigmaMultiplier = 3;
#outlierWidth = 5;
print(outlierSigmaMultiplier)
print(outlierMovingAverage)
print(outlierWidth)
print("outlier")
outlier <- m181::outlier(xts = ts, sigma.multiplier = outlierSigmaMultiplier, moving.average = outlierMovingAverage, width=outlierWidth, verbose=TRUE);
outlier <- cbind(POSIXt2matlab(index(outlier)), outlier);
}
print("equidistance")
equidistance <- m181::equidistance(xts = ts, percentage = equiFraction);
if (is.nan(gapLength)){
gaps <- NaN;
} else{
print("gaps")
gaps <- m181::gaps(xts = ts, gap.length = gapLength, delta.t.unit = "mins", origin = "1970-01-01");
#gaps is a list of 2 vectors:
gaps <- cbind(POSIXt2matlab(gaps$gaps.start), gaps$gaps.end);
}
if (is.nan(gradDeltaMax)){
gradient <- NaN;
} else{
print("gradient")
gradient <- m181::gradient(xts = ts, delta.max = gradDeltaMax, verbose=verbose);
gradient <- cbind(POSIXt2matlab(index(gradient)), gradient);
}
if ((is.nan(outlierSigmaMultiplier) | is.nan(outlierWidth))){
outlier <- NaN;
} else{
outlierMovingAverage = TRUE;
#outlierSigmaMultiplier = 3;
#outlierWidth = 5;
#print(outlierSigmaMultiplier)
#print(outlierMovingAverage)
#print(outlierWidth)
#print("outlier")
outlier <- m181::outlier(xts = ts, sigma.multiplier = outlierSigmaMultiplier, moving.average = outlierMovingAverage, width=outlierWidth, verbose=TRUE);
outlier <- cbind(POSIXt2matlab(index(outlier)), outlier);
}
if ((is.nan(yMin) | is.nan(yMax))){
range <- NaN;
} else{
print("range")
range <- m181::range(xts = ts, y.min = yMin, y.max = yMax, verbose=verbose);
range <- cbind(POSIXt2matlab(index(range)), range);
}
if (is.nan(constDeltaMax)){
constancy <- NaN;
} else{
print("constancy")
constancy <- m181::constancy(xts = ts, delta.max = constDeltaMax, verbose=verbose);
constancy <- cbind(POSIXt2matlab(index(constancy)), constancy);
}
if ((is.nan(noiseSmax) | is.nan(noiseWidth))){
noise <- NaN;
} else{
print("noise")
noise <- m181::noise(xts = ts, s.max = noiseSmax, width = noiseWidth, verbose=verbose);
noise <- cbind(POSIXt2matlab(index(noise)), noise);
}
#plotData <- ts
#graph <- dygraph(plotData, xlab = 'Time', ylab = "long") %>%
#  dyRangeSelector()
#print(graph)
# create return data
allData<-list(equidistance=equidistance, gaps=gaps, gradient=gradient, outlier=outlier, range=range, constancy=constancy, noise=noise);
View(ts)
source('C:/user1580/Projects/HSG/R/data/prepData.R')
source('C:/user1580/Projects/HSG/R/data/useLibraries.R')
hel('dygraphs')
help('dygraphs')
??dygraphs
install.packages("dygraphs")
install.packages(c("boot", "class", "cluster", "codetools", "DescTools", "evaluate", "foreign", "formatR", "highr", "htmlwidgets", "KernSmooth", "knitr", "lattice", "manipulate", "maps", "markdown", "MASS", "Matrix", "mgcv", "mvtnorm", "nlme", "nnet", "plyr", "R.utils", "Rcpp", "rmarkdown", "rpart", "scales", "spatial", "stringr", "survival", "XML"))
install.packages(c("foreign", "nlme"))
debugSource('C:/user1580/Projects/HSG/R/data/prepData.R')
graph <- dygraph(plotData, xlab = 'Time', ylab = varName) %>%
dySeries("ts", color = "black") %>%
dySeries("gradient", drawPoints = TRUE, pointSize = 10, color = "red", strokeWidth = 0) %>%
dySeries("constancy", drawPoints = TRUE, pointSize = 4, color = "yellow", strokeWidth = 0)
source('C:/user1580/Projects/HSG/R/data/useLibraries.R')
graph <- dygraph(plotData, xlab = 'Time', ylab = varName) %>%
dySeries("ts", color = "black") %>%
dySeries("gradient", drawPoints = TRUE, pointSize = 10, color = "red", strokeWidth = 0) %>%
dySeries("constancy", drawPoints = TRUE, pointSize = 4, color = "yellow", strokeWidth = 0)
print(graph)
source('C:/user1580/Projects/HSG/R/matthias/HSGSim_OutlierSensitivity_v1.r')
source('C:/user1580/Projects/HSG/R/matthias/HSGSim_OutlierSensitivity_v1.r')
source('C:/matlabData/R2015a/toolbox/R/prepRunM181.R')
source('C:/user1580/Projects/HSG/R/matthias/HSGSim_OutlierSensitivity_v1.r')
View(ts)
source('C:/user1580/Projects/HSG/R/data/useLibraries.R')
i=0
my.outlier <- outlier(ts,sigma.multiplier = 3.0, width = i)
my.outlier <- outlier(ts,sigma.multiplier = 3.0, width = 0)
my.outlier <- outlier(ts,sigma.multiplier = 3.0, width = 1)
my.outlier <- outlier(ts,sigma.multiplier = 3.0, width = 0.1)
m181::outlier
xts=ts
sigma.multiplier = 3
moving.average = TRUE
width=0
crit <- sd(xts, na.rm = TRUE) * sigma.multiplier
rm <- xts::as.xts(zoo::rollapply(data = zoo::as.zoo(xts),
width = width, mean, align = "center", fill = NA))
rm <- xts::as.xts(zoo::rollapply(data = zoo::as.zoo(xts),
width = 0.9, mean, align = "center", fill = NA))
rm <- xts::as.xts(zoo::rollapply(data = zoo::as.zoo(xts),
width = width, mean, align = "center", fill = NA))
seq(0,10,1)
sens.test <- NULL
for (i in seq(1,10,1)) {
cat(paste("Waiting for results for width =", i, "...", collapse = "\n"),rep("\n",2))
my.outlier <- outlier(ts,sigma.multiplier = 3.0, width = i)
n.true.values <- length(ts[my.outlier])
n.all.values <- length(ts)
perc.true.values <- n.true.values/n.all.values*100
sens.test.new <- c(i, perc.true.values)
sens.test <- rbind(sens.test, sens.test.new)
cat("\n")
cat(paste0("loop for width = ", i, " finished.", collapse = "\n"),rep("\n",2))
}
sens.test <- data.frame(sens.test,row.names = NULL)
names(sens.test) <- c("width", "true values (%)")
plot(sens.test[,1],sens.test[,2], las = 1,
type = "o",
pch = 16,
ylim = c(95,100),
xlab = names(sens.test)[1],
ylab = names(sens.test)[2],
cex.axis = 1.2,
cex.lab = 1.2
)
sens.test <- data.frame(sens.test,row.names = NULL)
names(sens.test) <- c("width", "true values (%)")
plot(sens.test[,1],sens.test[,2], las = 1,
type = "o",
pch = 16,
ylim = c(95,100),
xlab = names(sens.test)[1],
ylab = names(sens.test)[2],
cex.axis = 1.2,
cex.lab = 1.2
)
t1 <- Sys.time()
my.outlier <- outlier(ts,sigma.multiplier = 3, moving.average = FALSE)
t2 <- Sys.time()
cat("Dauer:", round(difftime(t2,t1,units = "secs")), "Sekunden")
# zeigt Zeitstempel und Werte an, die "TRUE" geflagt wurden, d.h. die nicht als Ausreisser gelten
head(ts[my.outlier])
# zeigt Zeitstempel und Werte an, die "FALSE" geflagt wurden, d.h. die als Ausreisser gelten
head(ts[!my.outlier])
# Gibt Anteil der Werte an, die durch Ausreissertest durchgehen
true.values <- length(ts[my.outlier])
all.values <- length(ts)
anteil.true.values <- true.values/all.values*100
cat("Anteil \'true values\': ", round(anteil.true.values,2),"%", sep="")
source('C:/user1580/Projects/HSG/R/matthias/HSGSim_OutlierSensitivity_v1.r')
cd C:\user1580\Projects\git\dataImport
cd "C:\user1580\Projects\git\dataImport"
cd "C:/user1580/Projects/git/dataImport"
cd("C:/user1580/Projects/git/dataImport")
load("C:/user1580/Projects/git/dataImport/MatlabExport.Rdata")
load("C:/user1580/Projects/git/dataImport/MatlabExport.Rdata")
load("C:/user1580/Projects/git/dataImport/MatlabExport.Rdata")
load("C:/user1580/Projects/git/dataImport/delete")
debugSource('C:/user1580/Projects/HSG/R/matthias/HSGSim_OutlierSensitivity_v1.r')
source('C:/matlabData/R2015a/toolbox/R/prepRunM181.R')
source('C:/user1580/Projects/HSG/R/data/loadTestData2ts.R')
m181::visualise_dy
m181::check_outlier()
m181::check_outlier
load("C:/user1580/Projects/git/testData/MatlabExport.Rdata")
load("C:/user1580/Projects/git/testData/m.rds")
a<-rnorm(10);saveRDS(a, "m.rds");
load("C:/user1580/Projects/HSG/R/m.rds")
a<-rnorm(10);saveRDS(a, file = "m.rds");
load("C:/user1580/Projects/HSG/R/m.rds")
a<-rnorm(10);save(a, file = "m.rds");
load("C:/user1580/Projects/HSG/R/m.rds")
load("C:/user1580/Projects/HSG/R/m.rds")
load("C:/user1580/Projects/HSG/R/m.rds")
load("C:/user1580/Projects/HSG/R/m.rds")
load("C:/user1580/Projects/HSG/R/m.rds")
load("C:/user1580/Projects/HSG/R/m.rds")
load("C:/user1580/Projects/git/testData/m.rda")
load("C:/user1580/Projects/git/testData/MatlabExport.Rda")
require(shiny)
install.packages("shiny")
require(shiny)
sliderInput("bins", "Number of bins:", min = 1, max = 50, value = 30)
renderPlot({
x <- faithful[, 2]  # Old Faithful Geyser data
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
library(RODBC)
install.packages("RODBC")
library(RODBC)
ch <- odbcConnect("Driver={PostgreSQL Unicode(x64)};Server=pc1114;Port=5432;Database=tview;uid=postgres;pwd=admin;")
ch <- odbcConnect("Driver={PostgreSQL Unicode};Server=pc1114;Port=5432;Database=tview;uid=postgres;pwd=admin;")
odbcConnect()
odbcConnect
ch <-  odbcDriverConnect("Driver={PostgreSQL Unicode};Server=pc1114;Port=5432;Database=tview;uid=postgres;pwd=admin;")
ch <-  odbcDriverConnect("Driver={PostgreSQL Unicode(x64)};Server=pc1114;Port=5432;Database=tview;uid=postgres;pwd=admin;")
th<-sqlQuery(sh, 'Selcet * from tviewhistory limit 1000');
th<-sqlQuery(ch, 'Selcet * from tviewhistory limit 1000');
th<-sqlQuery(ch, 'Select * from tviewhistory limit 1000');
th<-sqlQuery(ch, 'Select * from tviewhistory limit 100000');
th<-sqlQuery(ch, 'Select * from tviewhistory limit 100000');
th<-sqlQuery(ch, 'Select TViewHistory.Time_), CONVERT(float, TViewHistory.Value_) FROM TViewHistory, TViewTags, TViewStations, TViewAggregates WHERE  TViewHistory.Time_ >= '2016-04-01 15:25:22' AND TViewHistory.Time_ <= '2016-04-06 15:25:17' AND TViewHistory.Tag = TViewTags.ID AND TViewTags.Name = 'AI_O2_1' AND TViewTags.Station = TViewStations.ID AND TViewStations.Name = 'Fungi' AND TViewHistory.Aggregate = TViewAggregates.ID AND TViewAggregates.Name = 'Instantaneous'');
th<-sqlQuery(ch, "Select TViewHistory.Time_), CONVERT(float, TViewHistory.Value_) FROM TViewHistory, TViewTags, TViewStations, TViewAggregates WHERE  TViewHistory.Time_ >= '2016-04-01 15:25:22' AND TViewHistory.Time_ <= '2016-04-06 15:25:17' AND TViewHistory.Tag = TViewTags.ID AND TViewTags.Name = 'AI_O2_1' AND TViewTags.Station = TViewStations.ID AND TViewStations.Name = 'Fungi' AND TViewHistory.Aggregate = TViewAggregates.ID AND TViewAggregates.Name = 'Instantaneous'");
th<-sqlQuery(ch, "Select TViewHistory.Time_), TViewHistory.Value_ FROM TViewHistory, TViewTags, TViewStations, TViewAggregates WHERE  TViewHistory.Time_ >= '2016-04-01 15:25:22' AND TViewHistory.Time_ <= '2016-04-06 15:25:17' AND TViewHistory.Tag = TViewTags.ID AND TViewTags.Name = 'AI_O2_1' AND TViewTags.Station = TViewStations.ID AND TViewStations.Name = 'Fungi' AND TViewHistory.Aggregate = TViewAggregates.ID AND TViewAggregates.Name = 'Instantaneous'");
th<-sqlQuery(ch, "Select TViewHistory.Time_, TViewHistory.Value_ FROM TViewHistory, TViewTags, TViewStations, TViewAggregates WHERE  TViewHistory.Time_ >= '2016-04-01 15:25:22' AND TViewHistory.Time_ <= '2016-04-06 15:25:17' AND TViewHistory.Tag = TViewTags.ID AND TViewTags.Name = 'AI_O2_1' AND TViewTags.Station = TViewStations.ID AND TViewStations.Name = 'Fungi' AND TViewHistory.Aggregate = TViewAggregates.ID AND TViewAggregates.Name = 'Instantaneous'");
th<-sqlQuery(ch, "Select TViewHistory.Time_, TViewHistory.Value_ FROM TViewHistory, TViewTags, TViewStations, TViewAggregates WHERE  TViewHistory.Tag = TViewTags.ID AND TViewTags.Name = 'AI_O2_1' AND TViewTags.Station = TViewStations.ID AND TViewStations.Name = 'Fungi' AND TViewHistory.Aggregate = TViewAggregates.ID AND TViewAggregates.Name = 'Instantaneous'");
library(shiny)
runApp("C:/user1580/Projects/generalR/shiny/", host="0.0.0.0",port=5050)
library(shiny)
runApp("C:/user1580/Projects/generalR/shiny/", host="0.0.0.0",port=5050)
library(shiny)
runApp("C:/user1580/Projects/generalR/shiny/", host="0.0.0.0",port=5050)
library(shiny)
runApp("C:/user1580/Projects/generalR/shiny/", host="0.0.0.0",port=5050)
runApp("C:/user1580/Projects/generalR/shiny/", host="0.0.0.0",port=5050)
runApp("C:/user1580/Projects/generalR/shiny/", host="0.0.0.0",port=5050)
ch <-  odbcDriverConnect("Driver={PostgreSQL Unicode(x64)};Server=pc1114;Port=5432;Database=tview;uid=postgres;pwd=admin;")
th<-sqlQuery(ch, "Select TViewHistory.Time_, TViewHistory.Value_ FROM TViewHistory, TViewTags, TViewStations, TViewAggregates WHERE  TViewHistory.Tag = TViewTags.ID AND TViewTags.Name = 'AI_O2_1' AND TViewTags.Station = TViewStations.ID AND TViewStations.Name = 'Fungi' AND TViewHistory.Aggregate = TViewAggregates.ID AND TViewAggregates.Name = 'Instantaneous'");
ch <-  odbcDriverConnect("Driver={SQL Server};Server=pc1114;Database=tview;uid=tview;pwd=tview;")
ch <-  odbcDriverConnect("Driver={SQL Server};Server=pc1114\\opo;Database=tview;uid=tview;pwd=tview;")
th<-sqlQuery(ch, "Select TViewHistory.Time_, TViewHistory.Value_ FROM TViewHistory, TViewTags, TViewStations, TViewAggregates WHERE  TViewHistory.Tag = TViewTags.ID AND TViewTags.Name = 'AI_O2_1' AND TViewTags.Station = TViewStations.ID AND TViewStations.Name = 'Fungi' AND TViewHistory.Aggregate = TViewAggregates.ID AND TViewAggregates.Name = 'Instantaneous'");
write.csv(th,file="temp.csv")
runApp("C:/user1580/Projects/generalR/shiny/", host="0.0.0.0",port=5050)
runApp("C:/user1580/Projects/generalR/shiny/", host="0.0.0.0",port=5050)
runApp("C:/user1580/Projects/generalR/shiny/", host="0.0.0.0",port=5050)
write.xlsx
write.xlsx()
install.packages("xlsx")
system('wmic /node:pc1114 cpu get loadpercentage')
l=system('wmic /node:pc1114 cpu get loadpercentage')
l
l=system2('wmic /node:pc1114 cpu get loadpercentage')
l=system('wmic /node:pc1114 cpu get loadpercentage', intern=TRUE)
l
l=shell('wmic /node:pc1114 cpu get loadpercentage', intern=TRUE)
l=shell('wmic /node:pc1114 cpu get loadpercentage')
t1 <- try(system("who", intern = TRUE))
retStr<-shell(paste('wmic /node:',listOfPcNames(1),' cpu get loadpercentage', sep=""))
listOfPcNames = c("pc1114", "pc1115");
retStr<-shell(paste('wmic /node:',listOfPcNames(1),' cpu get loadpercentage', sep=""))
retStr<-shell(paste('wmic /node:',listOfPcNames[1],' cpu get loadpercentage', sep=""))
listOfPcNames = c("pc1114", "pc1115");
iPcCount=1;
retStr<-shell(paste('wmic /node:',listOfPcNames[iPcCount],' cpu get loadpercentage', sep=""))
retStr<-shell(paste('wmic /node:',listOfPcNames(1),' cpu get loadpercentage', sep=""))
retStr<-shell(paste('wmic /node:',listOfPcNames[iPcCount],' cpu get loadpercentage', sep=""))
retStr<-system(paste('wmic /node:',listOfPcNames[iPcCount],' cpu get loadpercentage', sep=""))
retStr<-system(paste('wmic /node:',listOfPcNames[iPcCount],' cpu get loadpercentage', sep=""), intern=TRUE)
retStr[2]
retStr<-system(paste('wmic /node:pc1116 cpu get loadpercentage', sep=""), intern=TRUE)
retStr[2]
?gsub
first(retStr[2], n=5)
retStr[2][2:5]
retStr[2][1]
regexpr('"(.*?)\r', retStr[2])
grep('"(.*?)\r', retStr[2])
sub('"(.*?)\r', retStr[2])
regmatches('"(.*?)\r', retStr[2])
gsub('"(.*?)\r', retStr[2])
?gsub
grep('"(.*?)\r', retStr[2], value = TRUE)
grep('(.*?)\r', retStr[2], value = TRUE)
grep('(.*?)\t', retStr[2], value = TRUE)
grep('(.*?)\r', retStr[2], value = TRUE)
grep('"(.*?)\r', retStr[2], value = TRUE)
grep('1(.*?)\r', retStr[2], value = TRUE)
install.packages('stringr')
require('stringr')
as.numeric(
str_extract(string=retStr[2],
pattern='[:digit:]+')
)
as.numeric(str_extract(string=retStr[2],pattern='[:digit:]+')
)
as.numeric(str_extract(string=retStr[2],pattern='[:digit:]+'))
?for
cpuPercentage[iPcCount]<-as.numeric(str_extract(string=retStr[2],pattern='[:digit:]+'))
a<-numeric(1,5)
a<-numeric(5)
cpuPercentage<-numeric(length(listOfPcNames))
dygraph(cpuPercentage, plotter: barChartPlotter)
dygraphs(cpuPercentage, plotter: barChartPlotter)
dygraphs::dygraph(cpuPercentage, plotter: barChartPlotter)
dygraphs::dygraph(cpuPercentage, )
dygraphs::dygraph(cpuPercentage )
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
retStr<-shell(paste('wmic /node:',listOfPcNames[iPcCount],' cpu get loadpercentage', sep=""))
retStr<-system(paste('wmic /node:',listOfPcNames[iPcCount],' cpu get loadpercentage', sep=""))
paste('wmic /node:',listOfPcNames[iPcCount],' cpu get loadpercentage', sep="")
listOfPcNames[iPcCount]
listOfPcNames
listOfPcNames(iPcCount)
listOfPcNames
listOfPcNames[[iPcCount]]
listOfPcNames[1]
source('~/.active-rstudio-document')
iPcCount<-1;
paste('wmic /node:',listOfPcNames[iPcCount],' cpu get loadpercentage', sep="")
retStr<-system(paste('wmic /node:',listOfPcNames[iPcCount],' cpu get loadpercentage', sep=""))
cpuPercentage[iPcCount]<-as.numeric(str_extract(string=retStr[2],pattern='[:digit:]+'))
cpuPercentage[iPcCount]
cpuPercentage(iPcCount)<-as.numeric(str_extract(string=retStr[2],pattern='[:digit:]+'))
as.numeric(str_extract(string=retStr[2],pattern='[:digit:]+'))
retStr<-system(paste('wmic /node:',listOfPcNames[iPcCount],' cpu get loadpercentage', sep=""))
retStr<-system(paste('wmic /node:',listOfPcNames[iPcCount],' cpu get loadpercentage', sep=""), intern=TRUE)
cpuPercentage[iPcCount]<-as.numeric(str_extract(string=retStr[2],pattern='[:digit:]+'))
source('~/.active-rstudio-document')
1:5
source('~/.active-rstudio-document')
dygraphs::dygraph(c(1,2,3))
dygraphs::dygraph(c(1,2,3))
dataframe(cpuPercentage)
data.frame(cpuPercentage)
data.frame(y=cpuPercentage, x=listOfPcNames)
dygraphs::dygraph(data.frame(x=listOfPcNamesy=cpuPercentage), plotter: barChartPlotter)
df<-data.frame(x=listOfPcNamesy=cpuPercentage)
df<-data.frame(x=listOfPcNames,y=cpuPercentage)
dygraphs::dygraph(df, plotter: barChartPlotter)
dygraphs::dygraph(df)
df<-data.frame(x=listOfPcNames)
dygraphs::dygraph(df, plotter: barChartPlotter)
df
df<-data.frame(y=cpuPercentage)
dygraphs::dygraph(df, plotter: barChartPlotter)
dygraphs::dygraph(df)
dygraphs::dygraph(df) %>%
dySeries(c("lwr", "fit", "upr"), label = "Deaths")
library(dygraphs)
dygraph(df) %>%
dySeries(c("lwr", "fit", "upr"), label = "Deaths")
dygraph(df)
dygraph(df)%>%
dyOptions(useDataTimezone = TRUE, plotter = barChartPlotter)
df<-data.frame(x=1:len,y=cpuPercentage)
dygraph(df)%>%
dyOptions(useDataTimezone = TRUE, plotter = barChartPlotter)
df<-data.frame(x=1:len,y=cpuPercentage)
dygraph(df)
dygraph(df)%>%
dyAxis("x",valueFormatter=listOfPcNames, axisLabelFormatter=listOfPcNames)
dygraph(df)%>%
dyAxis("x",valueFormatter=listOfPcNames, axisLabelFormatter=listOfPcNames)
dygraph(df)
dygraph(df)%>%
dyOptions(plotter= multiColumnBarPlotter)
dygraph(df)%>%
dyOptions(plotter: multiColumnBarPlotter)
barplot(cpuPercentage, names.arg = listOfPcNames)
source('~/.active-rstudio-document')
sort(listOfPcNames)
tmpStr <- sort(c("pc0001", "pc1038", "pc1064", "pc1068", "pc1071", "pc1072", "pc1073", "pc1112", "pc1113",  "pc1114", "pc1115", "pc1116", "simpc03", "simpc02", "simpc04", "simpc05", "simpc06"));
retStr<-system(paste('wmic /node:pc1114,pc1116 cpu get loadpercentage', sep=""), intern=TRUE)
paste(listOfPcNames, sep=',')
listOfPcNames <- sor(c("pc1114", "pc1115", "pc1116", "simpc03", "simpc02"));
listOfPcNames <- sort(c("pc1114", "pc1115", "pc1116", "simpc03", "simpc02"));
paste(listOfPcNames, sep=',')
paste(listOfPcNames, sep=','col=',')
paste(listOfPcNames, sep=',',col=',')
paste(listOfPcNames, ,col=',')
paste(listOfPcNames, col=',')
paste(listOfPcNames, col=';')
paste(listOfPcNames, sep='',col=';')
paste(listOfPcNames, sep=',',col='')
retStr<-system(paste('wmic /node:paste(listOfPcNames, sep=',',col='') cpu get loadpercentage', sep=""), intern=TRUE)
retStr<-system(paste('wmic /node:',paste(listOfPcNames, sep=',',col=''),'' cpu get loadpercentage', sep=""), intern=TRUE)
retStr<-system(paste('wmic /node:',paste(listOfPcNames, sep=',',col=''),' cpu get loadpercentage', sep=""), intern=TRUE)
retStr<-system(paste('wmic /node:',paste(listOfPcNames, sep=',',collapse=''),' cpu get loadpercentage', sep=""), intern=TRUE)
paste(listOfPcNames, sep=',',collapse='')
paste(listOfPcNames, sep=',',collapse=',')
paste(listOfPcNames, sep='',collapse=',')
retStr<-system(paste('wmic /node:',paste(listOfPcNames, sep='',collapse=','),' cpu get loadpercentage', sep=""), intern=TRUE)
for (iPcCount in 1:len) {
cpuPercentage[iPcCount]<-as.numeric(str_extract(string=retStr[iPcCount+1],pattern='[:digit:]+'))
}
len<-length(listOfPcNames);
or (iPcCount in 1:len) {
cpuPercentage[iPcCount]<-as.numeric(str_extract(string=retStr[iPcCount+1],pattern='[:digit:]+'))
}
for (iPcCount in 1:len) {
cpuPercentage[iPcCount]<-as.numeric(str_extract(string=retStr[iPcCount+1],pattern='[:digit:]+'))
}
library(stringr)
for (iPcCount in 1:len) {
cpuPercentage[iPcCount]<-as.numeric(str_extract(string=retStr[iPcCount+1],pattern='[:digit:]+'))
}
cpuPercentage<-numeric(len);
for (iPcCount in 1:len) {
cpuPercentage[iPcCount]<-as.numeric(str_extract(string=retStr[iPcCount+1],pattern='[:digit:]+'))
}
barplot(cpuPercentage, names.arg = listOfPcNames, horiz=TRUE, xpd=FALSE)
retStr<-system(paste('wmic /node:',paste(listOfPcNames, sep='',collapse=','),' cpu get loadpercentage', sep=""), intern=TRUE)
tmpStr <- c("pc0001", "fail", "simpc04");
listOfPcNames <- c("pc0001", "fail", "simpc04");
len<-length(listOfPcNames);
cpuPercentage<-numeric(len);
retStr<-system(paste('wmic /node:',paste(listOfPcNames, sep='',collapse=','),' cpu get loadpercentage', sep=""), intern=TRUE)
for (iPcCount in 1:len) {
cpuPercentage[iPcCount]<-as.numeric(str_extract(string=retStr[iPcCount+1],pattern='[:digit:]+'))
}
library(stringr)
len<-length(listOfPcNames);
cpuPercentage<-numeric(len);
retStr<-system(paste('wmic /node:',paste(listOfPcNames, sep='',collapse=','),' cpu get loadpercentage', sep=""), intern=TRUE)
for (iPcCount in 1:len) {
cpuPercentage[iPcCount]<-as.numeric(str_extract(string=retStr[iPcCount+1],pattern='[:digit:]+'))
}
retStr
retStr[1]
retStr[2]
retStr[3]
retStr[4]
retStr[5]
retStr[6]
library(stringr)
listOfPcNames <- sort(c("pc1114", "pc1115", "pc1116", "simpc03", "simpc02"));
len<-length(listOfPcNames);
cpuPercentage<-numeric(len);
retStr<-system(paste('wmic /node:',paste(listOfPcNames, sep='',collapse=','),' cpu get loadpercentage', sep=""), intern=TRUE)
for (iPcCount in 1:len) {
cpuPercentage[iPcCount]<-as.numeric(str_extract(string=retStr[iPcCount+1],pattern='[:digit:]+'))
}
barplot(cpuPercentage, names.arg = listOfPcNames, horiz=TRUE, xpd=FALSE)
install.packages(c("stringr", "dygraphs", "ggplot2"))
install.packages(c("markdown", "rbenchmark", "plot3d", "scatterplot3d", "prospectr", "RcppArmadillo", "xts", "lattice"))
install.packages("C:/user1580/Projects/HSG/R/lib/m181_0.3.4.zip", repos = NULL, type = "win.binary")
install.packages("xlsx")
system('wmic cpu get LoadPercentage  /value')
a<-system('wmic cpu get LoadPercentage  /value')
a<-system('wmic /node: pc1114 cpu get LoadPercentage  /value')
a<-system('wmic /node: pc1114 cpu get LoadPercentage  /value', intern=TRUE)
a<-system('wmic /node: pc1114 cpu get LoadPercentage ', intern=TRUE)
library(stringr)
listOfPcNames <- sort(c("pc1114", "pc1115", "pc1116", "simpc03", "simpc02"));
len<-length(listOfPcNames);
cpuPercentage<-numeric(len);
retStr<-system(paste('wmic /node:',paste(listOfPcNames, sep='',collapse=','),' cpu get loadpercentage', sep=""), intern=TRUE)
for (iPcCount in 1:len) {
cpuPercentage[iPcCount]<-as.numeric(str_extract(string=retStr[iPcCount+1],pattern='[:digit:]+'))
}
barplot(cpuPercentage, names.arg = listOfPcNames, horiz=TRUE, xpd=FALSE)
library(stringr)
listOfPcNames <- sort(c("pc1114", "pc1115", "pc1116", "simpc03", "simpc02"));
len<-length(listOfPcNames);
cpuPercentage<-numeric(len);
retStr<-system(paste('wmic /node:',paste(listOfPcNames, sep='',collapse=','),' cpu get loadpercentage', sep=""), intern=TRUE)
for (iPcCount in 1:len) {
cpuPercentage[iPcCount]<-as.numeric(str_extract(string=retStr[iPcCount+1],pattern='[:digit:]+'))
}
barplot(cpuPercentage, names.arg = listOfPcNames, horiz=TRUE, xpd=FALSE)
listOfPcNames <- c(sort(c("pc1114", "pc1115", "pc1116", "simpc03", "simpc02", "simpc06")), "pc1113");
numberOfPcs<-length(listOfPcNames);
nemesToLookFor<-c('MATLAB.exe', 'sim.exe', 'svchost.exe', 'DBSERVER.exe','Rterm.exe')
allNames<-character(0)
allRamUses<-numeric(0)
allPcs<-character(0)
for (iPcCount in 1:numberOfPcs) {
retStr<-system(paste('tasklist.exe /S ',listOfPcNames[iPcCount],' /U oposimul /P simul5', sep='') ,intern=TRUE)
retStr<- gsub(" Services ", "          ", retStr)
retStr<- gsub(" Console ", "         ", retStr)
retStr<- gsub(" RDP-Tcp#1  ", "           ", retStr)
allSplitValues<-strsplit(retStr, "\\s+")
len<-length(retStr)
procesNames<-character(len)
cpuUse<-numeric(len)
ramUse<-numeric(len)
for (k in 5:len){
procesNames[k]<-allSplitValues[k][[1]][1]
ramUse[k]<-as.numeric(gsub("\\.", "", allSplitValues[k][[1]][4]))
}
uniqueNames<-unique(procesNames)
numberOfUniqueNames<-length(procesNames)
uniqeRamUse<-numeric(numberOfUniqueNames)
for (iNameCount in 1:numberOfUniqueNames) {
uniqeRamUse[iNameCount]<-sum(ramUse[which(procesNames==uniqueNames[iNameCount])])
#uniqeRamUse[iNameCount]<-sum(ramUse[match(uniqueNames[iNameCount], procesNames)])
}
sortedIndex<-order(-uniqeRamUse)
uniqueNames<-uniqueNames[sortedIndex]
uniqeRamUse<-uniqeRamUse[sortedIndex]
allNames<-c(allNames, uniqueNames)
allRamUses<-c(allRamUses, uniqeRamUse)
allPcs<-c(allPcs,rep(listOfPcNames[iPcCount],numberOfUniqueNames))
}
df<-data.frame(allNames, allRamUses, allPcs)
barplot(df, names.arg = listOfPcNames)
rownames(df)
aggregate(df)
now
now()
cat(paste(Sys.time()),"\n")
paste(Sys.time())
install.packages("shiny")
load("C:/user1580/Projects/git/ausreisser/applicationOfM181.rmd")
setwd("C:/user1580/Projects/git/ausreisser")
